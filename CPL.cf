-- programs ------------------------------------------------

entrypoints Prog ;

Program.   Prog ::= [TopDef] ;

VarDef.    TopDef ::= Ident ":=" Expr  ;

FnDef.	   TopDef ::= Ident "(" [Arg] ")" Blk ;

separator nonempty TopDef "" ;

Argument.  Arg ::= Ident;

separator  Arg "," ;

-- statements ----------------------------------------------

Block.     Blk ::= "{" Comp "}" ;

CompPar.   Comp ::= Comp "||" Stmt ;

CompSeq.   Comp ::= Comp ";" Stmt ;

CompNil.   Comp ::= Stmt;

BStmt.     Stmt ::= Blk ;

Wait.      Stmt ::= "wait" "(" Expr ")";

Skip.      Stmt ::= "skip" ;

Ass.       Stmt ::= Ident ":=" Expr ;

Ret.       Stmt ::= "return" Expr ;

CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

While.     Stmt ::= "while" "(" Expr ")" Stmt ;

SExp.      Stmt ::= Expr ;

-- expressions ---------------------------------------------

EVar.      Expr4 ::= Ident ;

ELitInt.   Expr4 ::= Integer ;

EApp.      Expr4 ::= Ident "(" [Expr] ")" ;

EMul.      Expr3 ::= Expr3 MulOp Expr4 ;

EAdd.      Expr2 ::= Expr2 AddOp Expr3 ;

ECmp.      Expr1 ::= Expr1 RelOp Expr2 ;

coercions  Expr 4;

separator  Expr "," ;

-- operators -----------------------------------------------

Mul.       MulOp ::= "*";

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

